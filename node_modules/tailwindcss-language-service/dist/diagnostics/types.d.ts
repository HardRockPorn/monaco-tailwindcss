import type { Diagnostic } from 'vscode-languageserver';
import { DocumentClassName } from '../util/state';
export declare enum DiagnosticKind {
    CssConflict = "cssConflict",
    InvalidApply = "invalidApply",
    InvalidScreen = "invalidScreen",
    InvalidVariant = "invalidVariant",
    InvalidConfigPath = "invalidConfigPath",
    InvalidTailwindDirective = "invalidTailwindDirective",
    RecommendedVariantOrder = "recommendedVariantOrder"
}
export declare type CssConflictDiagnostic = Diagnostic & {
    code: DiagnosticKind.CssConflict;
    className: DocumentClassName;
    otherClassNames: DocumentClassName[];
};
export declare function isCssConflictDiagnostic(diagnostic: AugmentedDiagnostic): diagnostic is CssConflictDiagnostic;
export declare type InvalidApplyDiagnostic = Diagnostic & {
    code: DiagnosticKind.InvalidApply;
    className: DocumentClassName;
};
export declare function isInvalidApplyDiagnostic(diagnostic: AugmentedDiagnostic): diagnostic is InvalidApplyDiagnostic;
export declare type InvalidScreenDiagnostic = Diagnostic & {
    code: DiagnosticKind.InvalidScreen;
    suggestions: string[];
};
export declare function isInvalidScreenDiagnostic(diagnostic: AugmentedDiagnostic): diagnostic is InvalidScreenDiagnostic;
export declare type InvalidVariantDiagnostic = Diagnostic & {
    code: DiagnosticKind.InvalidVariant;
    suggestions: string[];
};
export declare function isInvalidVariantDiagnostic(diagnostic: AugmentedDiagnostic): diagnostic is InvalidVariantDiagnostic;
export declare type InvalidConfigPathDiagnostic = Diagnostic & {
    code: DiagnosticKind.InvalidConfigPath;
    suggestions: string[];
};
export declare function isInvalidConfigPathDiagnostic(diagnostic: AugmentedDiagnostic): diagnostic is InvalidConfigPathDiagnostic;
export declare type InvalidTailwindDirectiveDiagnostic = Diagnostic & {
    code: DiagnosticKind.InvalidTailwindDirective;
    suggestions: string[];
};
export declare function isInvalidTailwindDirectiveDiagnostic(diagnostic: AugmentedDiagnostic): diagnostic is InvalidTailwindDirectiveDiagnostic;
export declare type RecommendedVariantOrderDiagnostic = Diagnostic & {
    code: DiagnosticKind.RecommendedVariantOrder;
    suggestions: string[];
};
export declare function isRecommendedVariantOrderDiagnostic(diagnostic: AugmentedDiagnostic): diagnostic is RecommendedVariantOrderDiagnostic;
export declare type AugmentedDiagnostic = CssConflictDiagnostic | InvalidApplyDiagnostic | InvalidScreenDiagnostic | InvalidVariantDiagnostic | InvalidConfigPathDiagnostic | InvalidTailwindDirectiveDiagnostic | RecommendedVariantOrderDiagnostic;
